#!/usr/bin/env python3
"""
Script utilit√°rio para detectar e configurar dispositivos de √°udio.
Pode ser usado de forma interativa ou autom√°tica.
"""

import sys
import os
import argparse

# Adiciona o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src', 'core'))

from audioDeviceDetector import AudioDeviceDetector

def print_header():
    print("=" * 60)
    print("üé§ DETECTOR DE DISPOSITIVOS DE √ÅUDIO - WhisperSilent")
    print("=" * 60)
    print()

def auto_detect_mode():
    """Modo de detec√ß√£o autom√°tica"""
    print("üîç Modo: Detec√ß√£o Autom√°tica")
    print("-" * 30)
    
    detector = AudioDeviceDetector()
    
    # Mostra todos os dispositivos
    print("üìã Dispositivos dispon√≠veis:")
    print(detector.list_all_devices())
    
    # Detecta automaticamente o melhor
    print("ü§ñ Executando detec√ß√£o autom√°tica...")
    result = detector.auto_detect_best_device()
    
    if result:
        device_index, device_info = result
        print(f"‚úÖ DISPOSITIVO RECOMENDADO:")
        print(f"   √çndice: {device_index}")
        print(f"   Nome: {device_info['name']}")
        print(f"   Canais de entrada: {device_info['max_input_channels']}")
        print(f"   Taxa padr√£o: {device_info['default_samplerate']} Hz")
        print()
        print(f"üí° Para usar este dispositivo, configure:")
        print(f"   AUDIO_DEVICE={device_index}")
        print("   ou")
        print(f"   AUDIO_DEVICE=auto")
        return device_index
    else:
        print("‚ùå Nenhum dispositivo adequado foi encontrado automaticamente.")
        return None

def interactive_mode():
    """Modo interativo para sele√ß√£o de dispositivo"""
    print("üë§ Modo: Sele√ß√£o Interativa")
    print("-" * 30)
    
    detector = AudioDeviceDetector()
    result = detector.interactive_device_selection()
    
    if result:
        device_index, device_info = result
        print()
        print(f"‚úÖ DISPOSITIVO SELECIONADO:")
        print(f"   √çndice: {device_index}")
        print(f"   Nome: {device_info['name']}")
        print()
        print(f"üí° Para usar este dispositivo, configure:")
        print(f"   AUDIO_DEVICE={device_index}")
        return device_index
    else:
        print("‚ùå Nenhum dispositivo foi selecionado.")
        return None

def list_mode():
    """Modo para apenas listar dispositivos"""
    print("üìù Modo: Listar Dispositivos")
    print("-" * 30)
    
    detector = AudioDeviceDetector()
    print(detector.list_all_devices())
    
    input_devices = detector.get_input_devices()
    if input_devices:
        print(f"üí° Dispositivos de entrada encontrados: {len(input_devices)}")
        print("   Para usar um dispositivo espec√≠fico, configure AUDIO_DEVICE com:")
        print("   - 'auto' para detec√ß√£o autom√°tica")
        print("   - N√∫mero do √≠ndice (ex: AUDIO_DEVICE=2)")
        print("   - Parte do nome (ex: AUDIO_DEVICE=USB)")
    else:
        print("‚ùå Nenhum dispositivo de entrada encontrado.")

def test_mode(device_index=None):
    """Modo de teste de dispositivo espec√≠fico"""
    detector = AudioDeviceDetector()
    
    if device_index is None:
        print("üß™ Modo: Teste - Detectar e Testar Automaticamente")
        print("-" * 50)
        result = detector.auto_detect_best_device()
        if not result:
            print("‚ùå Nenhum dispositivo encontrado para teste.")
            return False
        device_index, device_info = result
        print(f"üéØ Testando dispositivo detectado: {device_info['name']}")
    else:
        print(f"üß™ Modo: Teste - Dispositivo {device_index}")
        print("-" * 30)
        try:
            device_info = detector.devices[device_index]
            print(f"üéØ Testando dispositivo: {device_info['name']}")
        except (IndexError, TypeError):
            print(f"‚ùå Dispositivo {device_index} n√£o encontrado.")
            return False
    
    print("‚è≥ Testando captura de √°udio por 3 segundos...")
    success = detector.test_device(device_index, duration=3.0)
    
    if success:
        print(f"‚úÖ Teste bem-sucedido! Dispositivo {device_index} est√° funcionando.")
        return True
    else:
        print(f"‚ùå Teste falhou. Dispositivo {device_index} pode ter problemas.")
        return False

def update_env_file(device_index):
    """Atualiza o arquivo .env com o dispositivo selecionado"""
    env_path = os.path.join(os.path.dirname(__file__), '..', '.env')
    
    if not os.path.exists(env_path):
        print(f"‚ö†Ô∏è Arquivo .env n√£o encontrado em {env_path}")
        return False
    
    # L√™ o arquivo atual
    with open(env_path, 'r') as f:
        lines = f.readlines()
    
    # Atualiza ou adiciona a linha AUDIO_DEVICE
    updated = False
    for i, line in enumerate(lines):
        if line.startswith('AUDIO_DEVICE='):
            lines[i] = f'AUDIO_DEVICE={device_index}\n'
            updated = True
            break
    
    if not updated:
        lines.append(f'AUDIO_DEVICE={device_index}\n')
    
    # Escreve o arquivo atualizado
    with open(env_path, 'w') as f:
        f.writelines(lines)
    
    print(f"‚úÖ Arquivo .env atualizado: AUDIO_DEVICE={device_index}")
    return True

def main():
    parser = argparse.ArgumentParser(
        description="Detector de dispositivos de √°udio para WhisperSilent",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python detect_audio_devices.py --auto          # Detec√ß√£o autom√°tica
  python detect_audio_devices.py --interactive   # Sele√ß√£o interativa
  python detect_audio_devices.py --list          # Listar dispositivos
  python detect_audio_devices.py --test          # Testar dispositivo detectado
  python detect_audio_devices.py --test 2        # Testar dispositivo 2
  python detect_audio_devices.py --auto --update # Detectar e atualizar .env
        """
    )
    
    parser.add_argument('--auto', '-a', action='store_true',
                        help='Detectar automaticamente o melhor dispositivo')
    parser.add_argument('--interactive', '-i', action='store_true',
                        help='Sele√ß√£o interativa de dispositivo')
    parser.add_argument('--list', '-l', action='store_true',
                        help='Listar todos os dispositivos dispon√≠veis')
    parser.add_argument('--test', '-t', nargs='?', const=-1, type=int,
                        help='Testar dispositivo (sem argumento = auto, com n√∫mero = espec√≠fico)')
    parser.add_argument('--update', '-u', action='store_true',
                        help='Atualizar arquivo .env com dispositivo selecionado')
    
    args = parser.parse_args()
    
    # Se nenhum argumento foi fornecido, usa modo interativo
    if not any([args.auto, args.interactive, args.list, args.test is not None]):
        args.interactive = True
    
    print_header()
    
    device_index = None
    
    try:
        if args.list:
            list_mode()
        elif args.auto:
            device_index = auto_detect_mode()
        elif args.interactive:
            device_index = interactive_mode()
        elif args.test is not None:
            if args.test == -1:
                # Teste autom√°tico
                test_mode()
            else:
                # Teste de dispositivo espec√≠fico
                test_mode(args.test)
        
        # Se --update foi especificado e temos um dispositivo, atualiza .env
        if args.update and device_index is not None:
            print()
            print("üìù Atualizando configura√ß√£o...")
            update_env_file(device_index)
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Opera√ß√£o cancelada pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
    
    print()
    print("üèÅ Opera√ß√£o conclu√≠da.")

if __name__ == "__main__":
    main()