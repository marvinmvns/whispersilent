#!/usr/bin/env python3
"""
Script de valida√ß√£o final da instala√ß√£o WhisperSilent.
Verifica se todos os componentes est√£o funcionando corretamente.
"""

import sys
import os
import subprocess
import json
from pathlib import Path

def check_file_permissions():
    """Verifica se os scripts t√™m as permiss√µes corretas"""
    print("üîê Verificando permiss√µes dos arquivos...")
    
    scripts_to_check = [
        'scripts/test_microphone_basic.py',
        'scripts/test_transcription_api.py', 
        'scripts/test_complete_system.py',
        'scripts/install_and_test.sh',
        'scripts/detect_audio_devices.py'
    ]
    
    all_good = True
    for script in scripts_to_check:
        script_path = Path(script)
        if script_path.exists():
            if os.access(script_path, os.X_OK):
                print(f"   ‚úÖ {script}")
            else:
                print(f"   ‚ùå {script} (n√£o execut√°vel)")
                all_good = False
        else:
            print(f"   ‚ùå {script} (n√£o encontrado)")
            all_good = False
    
    return all_good

def check_environment_file():
    """Verifica se o arquivo .env est√° configurado"""
    print("‚öôÔ∏è Verificando arquivo de configura√ß√£o...")
    
    env_path = Path('.env')
    if not env_path.exists():
        print("   ‚ùå Arquivo .env n√£o encontrado")
        return False
    
    # L√™ o arquivo .env
    try:
        with open('.env', 'r') as f:
            content = f.read()
        
        # Verifica configura√ß√µes cr√≠ticas
        checks = {
            'AUDIO_DEVICE': 'auto' in content or 'plughw:' in content,
            'SPEECH_RECOGNITION_ENGINE': 'SPEECH_RECOGNITION_ENGINE=' in content,
            'SAMPLE_RATE': 'SAMPLE_RATE=' in content
        }
        
        all_configured = True
        for key, configured in checks.items():
            if configured:
                print(f"   ‚úÖ {key}")
            else:
                print(f"   ‚ùå {key} (n√£o configurado)")
                all_configured = False
        
        # Verifica se API est√° configurada
        api_configured = (
            'API_ENDPOINT=' in content and 
            'your-api-endpoint' not in content and
            'API_KEY=' in content and 
            'your_api_key' not in content
        )
        
        if api_configured:
            print("   ‚úÖ API configurada")
        else:
            print("   ‚ö†Ô∏è API n√£o configurada (opcional)")
        
        return all_configured
        
    except Exception as e:
        print(f"   ‚ùå Erro ao ler .env: {e}")
        return False

def check_python_dependencies():
    """Verifica se as depend√™ncias Python est√£o instaladas"""
    print("üêç Verificando depend√™ncias Python...")
    
    required_modules = [
        'numpy',
        'pyaudio', 
        'speech_recognition',
        'requests',
        'flask',
        'dotenv'
    ]
    
    optional_modules = [
        'pocketsphinx',
        'vosk',
        'whisper',
        'faster_whisper'
    ]
    
    all_required = True
    
    # Verifica m√≥dulos obrigat√≥rios
    for module in required_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}")
        except ImportError:
            print(f"   ‚ùå {module} (obrigat√≥rio)")
            all_required = False
    
    # Verifica m√≥dulos opcionais
    optional_available = []
    for module in optional_modules:
        try:
            __import__(module)
            optional_available.append(module)
            print(f"   ‚úÖ {module} (opcional)")
        except ImportError:
            print(f"   ‚ö†Ô∏è {module} (opcional, n√£o instalado)")
    
    print(f"   üìä Engines opcionais dispon√≠veis: {len(optional_available)}")
    return all_required

def check_directory_structure():
    """Verifica se a estrutura de diret√≥rios est√° correta"""
    print("üìÅ Verificando estrutura de diret√≥rios...")
    
    required_dirs = [
        'src/core',
        'src/transcription', 
        'src/api',
        'src/services',
        'scripts',
        'tests',
        'logs',
        'temp',
        'transcriptions'
    ]
    
    optional_dirs = [
        'models',
        'venv'
    ]
    
    all_present = True
    
    for directory in required_dirs:
        dir_path = Path(directory)
        if dir_path.exists() and dir_path.is_dir():
            print(f"   ‚úÖ {directory}")
        else:
            print(f"   ‚ùå {directory} (obrigat√≥rio)")
            all_present = False
    
    for directory in optional_dirs:
        dir_path = Path(directory)
        if dir_path.exists() and dir_path.is_dir():
            print(f"   ‚úÖ {directory} (opcional)")
        else:
            print(f"   ‚ö†Ô∏è {directory} (opcional, n√£o encontrado)")
    
    return all_present

def run_quick_tests():
    """Executa testes r√°pidos dos componentes"""
    print("üß™ Executando testes r√°pidos...")
    
    test_results = {}
    
    # Teste de import dos m√≥dulos principais
    try:
        sys.path.append('src/core')
        sys.path.append('src/transcription')
        sys.path.append('src/api')
        
        from config import Config
        from speechRecognitionService import SpeechRecognitionService
        from apiService import ApiService
        
        print("   ‚úÖ Imports dos m√≥dulos principais")
        test_results['imports'] = True
    except Exception as e:
        print(f"   ‚ùå Imports falharam: {e}")
        test_results['imports'] = False
    
    # Teste b√°sico de configura√ß√£o
    try:
        sample_rate = Config.AUDIO["sample_rate"]
        engine = Config.SPEECH_RECOGNITION["engine"]
        print(f"   ‚úÖ Configura√ß√£o carregada ({sample_rate}Hz, {engine})")
        test_results['config'] = True
    except Exception as e:
        print(f"   ‚ùå Configura√ß√£o falhou: {e}")
        test_results['config'] = False
    
    # Teste de inicializa√ß√£o do speech service
    try:
        service = SpeechRecognitionService()
        engine_info = service.get_engine_info()
        print(f"   ‚úÖ Speech service ({engine_info['engine']})")
        test_results['speech_service'] = True
    except Exception as e:
        print(f"   ‚ùå Speech service falhou: {e}")
        test_results['speech_service'] = False
    
    return test_results

def generate_report(results):
    """Gera relat√≥rio final da valida√ß√£o"""
    print("\n" + "=" * 60)
    print("üìã RELAT√ìRIO DE VALIDA√á√ÉO DA INSTALA√á√ÉO")
    print("=" * 60)
    
    # Componentes verificados
    components = {
        "Permiss√µes de arquivos": results.get('permissions', False),
        "Arquivo de configura√ß√£o": results.get('env_file', False), 
        "Depend√™ncias Python": results.get('dependencies', False),
        "Estrutura de diret√≥rios": results.get('directories', False),
        "Testes b√°sicos": results.get('quick_tests', {}).get('imports', False)
    }
    
    # Status geral
    all_critical_ok = all([
        results.get('permissions', False),
        results.get('env_file', False),
        results.get('dependencies', False),
        results.get('directories', False),
        results.get('quick_tests', {}).get('imports', False)
    ])
    
    print("\nüîç STATUS DOS COMPONENTES:")
    for component, status in components.items():
        print(f"   {'‚úÖ' if status else '‚ùå'} {component}")
    
    print(f"\nüéØ STATUS GERAL: {'‚úÖ PRONTO PARA USO' if all_critical_ok else '‚ùå PROBLEMAS ENCONTRADOS'}")
    
    if all_critical_ok:
        print("\nüéâ INSTALA√á√ÉO VALIDADA COM SUCESSO!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("   1. Execute testes espec√≠ficos:")
        print("      - python scripts/test_microphone_basic.py")
        print("      - python scripts/test_transcription_api.py") 
        print("      - python scripts/test_complete_system.py")
        print("   2. Configure API no .env (se necess√°rio)")
        print("   3. Inicie o sistema: python src/mainWithServer.py")
        print("   4. Acesse: http://localhost:8000")
    else:
        print("\n‚ö†Ô∏è PROBLEMAS ENCONTRADOS QUE PRECISAM SER RESOLVIDOS:")
        
        if not results.get('permissions', False):
            print("   ‚Ä¢ Execute: chmod +x scripts/*.py scripts/*.sh")
        if not results.get('env_file', False):
            print("   ‚Ä¢ Configure o arquivo .env: cp .env.example .env")
        if not results.get('dependencies', False):
            print("   ‚Ä¢ Instale depend√™ncias: pip install -r requirements.txt")
        if not results.get('directories', False):
            print("   ‚Ä¢ Verifique estrutura de diret√≥rios")
        if not results.get('quick_tests', {}).get('imports', False):
            print("   ‚Ä¢ Problemas nos imports - verifique instala√ß√£o")
            
        print("\nüí° SUGEST√ÉO: Execute ./scripts/install_and_test.sh")
    
    return all_critical_ok

def main():
    """Fun√ß√£o principal"""
    print("üîç VALIDA√á√ÉO DA INSTALA√á√ÉO WHISPERSILENT")
    print("=" * 50)
    print()
    
    results = {}
    
    # Executa todas as verifica√ß√µes
    results['permissions'] = check_file_permissions()
    print()
    
    results['env_file'] = check_environment_file() 
    print()
    
    results['dependencies'] = check_python_dependencies()
    print()
    
    results['directories'] = check_directory_structure()
    print()
    
    results['quick_tests'] = run_quick_tests()
    print()
    
    # Gera relat√≥rio final
    success = generate_report(results)
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Valida√ß√£o cancelada pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado na valida√ß√£o: {e}")
        sys.exit(1)